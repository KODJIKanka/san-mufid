import { firestore } from "firebase-admin";
import { ObjectKeys } from "../types/ObjectKeys";
import DocumentReference = firestore.DocumentReference;
import DocumentSnapshot = firestore.DocumentSnapshot;
import { TortoiseDataOptions } from "../types/utils";
import {
  DataResponseWithId,
  DataResponseWithoutId,
  DataWithId,
} from "../types/DataResponse";

/**
 * Class representing a TortoiseDocumentSnapshot
 * @template T
 */
export default class TortoiseDocumentSnapshot<T> {
  /**
   * A firestore document's snapshot
   * @type {DocumentSnapshot}
   * @readonly
   */
  readonly snap: DocumentSnapshot;

  /**
   * A firestore document's reference
   * @type {DocumentReference}
   * @readonly
   */
  readonly ref: DocumentReference;

  /**
   * A boolean that define if document exist
   * @type {boolean}
   * @readonly
   */
  readonly exists: boolean;

  /**
   * Create a new TortoiseDocumentSnapshot
   * @param {DocumentSnapshot} snap - A firestore document's snapshot
   */
  constructor(snap: DocumentSnapshot) {
    this.snap = snap;
    this.ref = snap.ref;
    this.exists = snap.exists;
  }


  data(options: { id: true }): DataWithId<T>
  data(options: { id: false }): DataResponseWithoutId<T>
  data(options?: TortoiseDataOptions): DataResponseWithId<T> | DataResponseWithoutId<T>

  /**
   * Retrieve document's data
   * @param {TortoiseDataOptions} [options={id: false}] - options to set when getting data
   * @return {DataResponseWithoutId<T> | DataWithId<T>}
   */
  data(options: TortoiseDataOptions = { id: false }): DataWithId<T> | DataResponseWithoutId<T> {
    if (!this.exists) return null;

    if (options.id) {
      return { ...this.snap.data(), id: this.ref.id } as T & { id: string };
    }

    return this.snap.data() as T;
  }

  /**
   * Retrieve the specific field
   * @param {ObjectKeys<T>} key - path to specific field
   * @return {any | undefined} - Return value of the specific fields else return undefined
   */
  get(key: ObjectKeys<T>): any | undefined {
    return this.snap.get(key);
  }

  /**
   * Return true if provided value is equal to the snapshot
   * @param {*} other - the value to compare against
   * @return {boolean} - Return true if value matches
   */
  isEqual(other: any): boolean {
    return this.snap.isEqual(other);
  }
}