import { FlattenObject } from "../types/Flatten";

/**
 * Get variable's type
 * @param {*} a - the variable to get the type
 * @return {string}
 */
export function getType(a: any): string {
  return Object.prototype.toString.call(a).slice(8, -1).toLowerCase();
}

/**
 * Completely flatten object by using dot notation
 * @param {*} data - object to flatten
 * @param {string} [prefix] - prefix to use with key
 * @throws Throw error when data is not an object
 * @return {FlattenObject}
 *
 * @example
 * // return {'foo.bar': "hello"}
 * flatten({foo: {bar: "hello"}})
 */
export function flatten(data: any, prefix?: string): FlattenObject {
  let flattened: { [k: string]: any } = {};

  if (getType(data) !== "object") {
    throw new Error("Invalid data to flatten. Data must be an object");
  }

  for (const key of Object.keys(data)) {
    if (getType(data[key]) === "object") {
      flattened = {
        ...flattened,
        ...flatten(data[key], prefix ? `${prefix}.${key}` : `${key}`,
        ),
      };
    } else {
      flattened[prefix ? `${prefix}.${key}` : `${key}`] = data[key];
    }
  }

  return flattened;
}